package org.ds.rps.interfaces;


/**
* org/ds/rps/interfaces/_GameInterfaceImplBase.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameInterfaces.idl
* 29 March 2015 22:08:29 o'clock IST
*/

public abstract class _GameInterfaceImplBase extends org.omg.CORBA.portable.ObjectImpl
                implements org.ds.rps.interfaces.GameInterface, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors
  public _GameInterfaceImplBase ()
  {
  }

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("subscribe", new java.lang.Integer (0));
    _methods.put ("unsubscribe", new java.lang.Integer (1));
    _methods.put ("getPlayerNameById", new java.lang.Integer (2));
    _methods.put ("hasOpenSlot", new java.lang.Integer (3));
    _methods.put ("isValidPlayer", new java.lang.Integer (4));
    _methods.put ("setPlayerIsReady", new java.lang.Integer (5));
    _methods.put ("checkIfPlayersAreReadyToStart", new java.lang.Integer (6));
    _methods.put ("setPlayerSelection", new java.lang.Integer (7));
    _methods.put ("checkIfPlayersHaveSelected", new java.lang.Integer (8));
    _methods.put ("calculateResults", new java.lang.Integer (9));
    _methods.put ("endCurrentGame", new java.lang.Integer (10));
    _methods.put ("hasAPlayerLeft", new java.lang.Integer (11));
    _methods.put ("event_listener", new java.lang.Integer (12));
    _methods.put ("getHowTooPlayFile", new java.lang.Integer (13));
    _methods.put ("currGameDetails", new java.lang.Integer (14));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  //Player methods
       case 0:  // org/ds/rps/interfaces/GameInterface/subscribe
       {
         try {
           String player_name = in.read_string ();
           org.ds.rps.interfaces.CallBack callback = org.ds.rps.interfaces.CallBackHelper.read (in);
           String $result = null;
           $result = this.subscribe (player_name, callback);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (org.ds.rps.interfaces.create_fail $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.create_failHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // org/ds/rps/interfaces/GameInterface/unsubscribe
       {
         try {
           String player_id = in.read_string ();
           boolean $result = false;
           $result = this.unsubscribe (player_id);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         } catch (org.ds.rps.interfaces.destroy_fail $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.destroy_failHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // org/ds/rps/interfaces/GameInterface/getPlayerNameById
       {
         try {
           String player_id = in.read_string ();
           String $result = null;
           $result = this.getPlayerNameById (player_id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         }
         break;
       }


  //Game methods
       case 3:  // org/ds/rps/interfaces/GameInterface/hasOpenSlot
       {
         boolean $result = false;
         $result = this.hasOpenSlot ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // org/ds/rps/interfaces/GameInterface/isValidPlayer
       {
         try {
           String player_id = in.read_string ();
           boolean $result = false;
           $result = this.isValidPlayer (player_id);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // org/ds/rps/interfaces/GameInterface/setPlayerIsReady
       {
         try {
           String player_id = in.read_string ();
           boolean ready = in.read_boolean ();
           boolean $result = false;
           $result = this.setPlayerIsReady (player_id, ready);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // org/ds/rps/interfaces/GameInterface/checkIfPlayersAreReadyToStart
       {
         boolean $result = false;
         $result = this.checkIfPlayersAreReadyToStart ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 7:  // org/ds/rps/interfaces/GameInterface/setPlayerSelection
       {
         try {
           String player_id = in.read_string ();
           int choice = in.read_long ();
           boolean $result = false;
           $result = this.setPlayerSelection (player_id, choice);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // org/ds/rps/interfaces/GameInterface/checkIfPlayersHaveSelected
       {
         boolean $result = false;
         $result = this.checkIfPlayersHaveSelected ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 9:  // org/ds/rps/interfaces/GameInterface/calculateResults
       {
         boolean $result = false;
         $result = this.calculateResults ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // org/ds/rps/interfaces/GameInterface/endCurrentGame
       {
         boolean $result = false;
         $result = this.endCurrentGame ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 11:  // org/ds/rps/interfaces/GameInterface/hasAPlayerLeft
       {
         boolean $result = false;
         $result = this.hasAPlayerLeft ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  //Callback method
       case 12:  // org/ds/rps/interfaces/GameInterface/event_listener
       {
         try {
           String player_id = in.read_string ();
           String message = in.read_string ();
           org.ds.rps.interfaces.CallBack callback = org.ds.rps.interfaces.CallBackHelper.read (in);
           this.event_listener (player_id, message, callback);
           out = $rh.createReply();
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         }
         break;
       }


  //File transfer method
       case 13:  // org/ds/rps/interfaces/GameInterface/getHowTooPlayFile
       {
         try {
           String file_name = in.read_string ();
           byte $result[] = null;
           $result = this.getHowTooPlayFile (file_name);
           out = $rh.createReply();
           org.ds.rps.interfaces.DataHelper.write (out, $result);
         } catch (org.ds.rps.interfaces.unknown_path $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_pathHelper.write (out, $ex);
         }
         break;
       }


  //Any method
       case 14:  // org/ds/rps/interfaces/GameInterface/currGameDetails
       {
         try {
           String player_id = in.read_string ();
           org.omg.CORBA.AnyHolder anyGame = new org.omg.CORBA.AnyHolder ();
           this.currGameDetails (player_id, anyGame);
           out = $rh.createReply();
           out.write_any (anyGame.value);
         } catch (org.ds.rps.interfaces.unknown_player $ex) {
           out = $rh.createExceptionReply ();
           org.ds.rps.interfaces.unknown_playerHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:org/ds/rps/interfaces/GameInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }


} // class _GameInterfaceImplBase
